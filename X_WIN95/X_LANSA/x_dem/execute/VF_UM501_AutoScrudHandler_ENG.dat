* ---------------------------------------------------------------------------------------------------
* This is a SCRUD command handler in framework "<<FRAMEWORK>>".
* It belongs to business object "<<BUSINESS_OBJECT_CAPTION>>".
* Created <<CREATEDDATE>> by <<CREATEDUSER>> with Windows desktop style controls.<<COND_NOT_MD>>
* Created <<CREATEDDATE>> by <<CREATEDUSER>> with Material Design style controls.<<COND_MD>>  
* This diagram indicates how and where it is used: <<COND_AUTOSCRUD>>
* Annotate Img=%partdir%VF_UM501_AutoScrud_Slide2.PNG width=1000 height=563 <<COND_AUTOSCRUD>>
* Note: If you can’t see the diagram, go to the Home tab, then move across into the Design area. <<COND_AUTOSCRUD>>
*       Click on the bottom right image that has the hint “Toggle Annotation Enabled/Disabled state”. <<COND_AUTOSCRUD>>
* ---------------------------------------------------------------------------------------------------
Begin_Com Role(*EXTENDS #vf_ac010O) Height(270) Width(500) 

Group_By Name(#XG_AccessKeys) Fields(<<EXPAND_KEYS>>)

Group_By Name(#XG_EditableDataItems) Fields(<<EXPAND_ALLREAL>>)

Group_By Name(#XG_ReadOnlyDataItems) Fields(<<EXPAND_ALLVIRTUAL>>)

Group_By Name(#XG_AllDataItems) Fields(#XG_EditableDataItems #XG_ReadOnlyDataItems)

* ---------------------------------------------------------------------------------
Def_List Name(#AllDataItems) Fields(#XG_AllDataItems) Type(*Working) Entrys(*MAX)
Def_List Name(#EditableDataItems) Fields(#XG_EditableDataItems) Type(*Working) Entrys(*MAX)
Def_List Name(#ReadOnlyDataItems) Fields(#XG_ReadOnlyDataItems) Type(*Working) Entrys(*MAX)
Def_List Name(#AccessKeys) Fields(#XG_AccessKeys) Type(*Working) Entrys(1)
Define_Com Class(#Prim_Boln) Name(#ServerModuleResult) 

* ---------------------------------------------------------------------------------
Define_Com Class(#Prim_panl) Name(#DataItemPanel) Parent(#COM_OWNER) Displayposition(1) Tabposition(1) Height(238) Left(0) Top(0) Width(500) Horizontalscroll(True) Verticalscroll(True) Tabstop(False)
Define_Com Class(#Prim_panl) Name(#ButtonPanel) Parent(#COM_OWNER) Displayposition(2) Tabposition(2) Left(0) Top(238) Width(500) Layoutmanager(#ButtonPanelAttachmenthManager) Height(32) Tabstop(False)
Define_Com Class(#PRIM_ATLI) Name(#AttachDataItemPanel) Manage(#DataItemPanel) Parent(#MainPanelAttachmentManager) Attachment(Center)
Define_Com Class(#PRIM_ATLI) Name(#AttachButtonPanel) Manage(#ButtonPanel) Parent(#MainPanelAttachmentManager) Attachment(Bottom)
* ---------------------------------------------------------------------------------
Define_Com Class(#Prim_atlm) Name(#ButtonPanelAttachmenthManager)
Define_Com Class(#Prim_atli) Name(#ButtonPanelAttachmentSave) Parent(#ButtonPanelAttachmenthManager) Manage(#Save_Button) Attachment(Right) Marginright(4) Margintop(4) Marginbottom(4)
Define_Com Class(#Prim_atli) Name(#ButtonPanelAttachmentDelete) Parent(#ButtonPanelAttachmenthManager) Manage(#Delete_Button) Attachment(Right) Marginright(4) Margintop(4) Marginbottom(4)
Define_Com Class(#Prim_atli) Name(#ButtonPanelAttachmentAnother) Parent(#ButtonPanelAttachmenthManager) Manage(#Another_Button) Attachment(Right) Marginright(4) Margintop(4) Marginbottom(4)
* ---------------------------------------------------------------------------------
<<COND_MD>>Define_Com Class(#PRIM_MD.RaisedButton) Name(#Save_Button) Parent(#ButtonPanel) Caption(*MTXTUF_SAVE) Displayposition(1) Tabposition(1) Height(24) Left(416) Top(4) Buttondefault(True) Themedrawstyle('MediumTitle') 
<<COND_MD>>Define_Com Class(#PRIM_MD.RaisedButton) Name(#Delete_Button) Parent(#ButtonPanel) Caption(*MTXTUF_DELETE) Displayposition(2) Tabposition(2) Height(24) Left(332) Top(4) Themedrawstyle('ForegroundMediumPrimary')
<<COND_MD>>Define_Com Class(#PRIM_MD.RaisedButton) Name(#Another_Button) Parent(#ButtonPanel) Caption(*MTXTUF_CREATEMORE) Displayposition(3) Tabposition(3) Height(24) Left(332) Top(4) Buttondefault(True) Width(100) Themedrawstyle('ForegroundMediumPrimary') 
<<COND_NOT_MD>>Define_Com Class(#Prim_phbn) Name(#Save_Button) Parent(#ButtonPanel) Caption(*MTXTUF_SAVE) Displayposition(1) Tabposition(1) Height(24) Left(416) Top(4) Buttondefault(True) 
<<COND_NOT_MD>>Define_Com Class(#Prim_phbn) Name(#Delete_Button) Parent(#ButtonPanel) Caption(*MTXTUF_DELETE) Displayposition(2) Tabposition(2) Height(24) Left(332) Top(4) 
<<COND_NOT_MD>>Define_Com Class(#Prim_phbn) Name(#Another_Button) Parent(#ButtonPanel) Caption(*MTXTUF_CREATEMORE) Displayposition(3) Tabposition(3) Height(24) Left(332) Top(4) Buttondefault(True) Width(100) 
* ---------------------------------------------------------------------------------
<<EXPAND_PANEL_LAYOUT>> <<PARM3=False>> <<INDEX1=1:1>> <<INDEX2=4:24>> <<INDEX3=22:0>> <<PARM1=Define_Com Class(%NAME%.Visual) Parent(#DataItemPanel) Displayposition(%INDEX1%) Labeltype(<<IDENTIFICATION>>) Tabposition(%INDEX1%) Top(%INDEX2%) Left(4) MarginLeft(150) Height(22) Width(400)>> <<PARM2=Define_Com Class(%NAME%.Visual) Parent(#DataItemPanel) Displayposition(%INDEX1%) Labeltype(<<IDENTIFICATION>>) Tabposition(%INDEX1%) Top(%INDEX2%) Left(4) MarginLeft(150) Height(22) Width(400) ReadOnly(True)>> 
<<EXPAND_PANEL_LAYOUT>> <<PARM3=True>>  <<INDEX1=1:1>> <<INDEX2=4:58>> <<INDEX3=58:0>> <<PARM1=Define_Com Class(%NAME%.%MDEDITTYPE%) Parent(#DataItemPanel) Displayposition(%INDEX1%) CaptionType(<<IDENTIFICATION>>) Tabposition(%INDEX1%) Top(%INDEX2%) Left(4) Height(56) Width(400)>> <<PARM2=Define_Com Class(%NAME%.%MDEDITTYPE%) Parent(#DataItemPanel) Displayposition(%INDEX1%) CaptionType(<<IDENTIFICATION>>) Tabposition(%INDEX1%) Top(%INDEX2%) Left(4) Height(56) Width(400) ReadOnly(True) Appearance(None)>> 
* ---------------------------------------------------------------------------------
Mthroutine Name(uInitialize) Options(*REDEFINE)
* Do the ancestor thing
#COM_ANCESTOR.uInitialize
* Track changes to visual controls
#COM_SELF.avTrackControlChanges Incontainer(#COM_Self) Insertclearcontenticon(True)
* Auto arrange items on the main data panel
#COM_SELF.avStartAutoArrangingControls Onpanel(#DataItemPanel) 
* Initialize some visibility
Set Com(#Save_Button #Delete_Button #Another_Button) Visible(False)
Endroutine

* ---------------------------------------------------------------------------------
Mthroutine Name(uTerminate) Options(*REDEFINE)
* Stop tracking changes to visual controls
#COM_SELF.avStopTrackingControlChanges
* Stop auto arranging the data panel
#Com_Self.avStopAutoArrangingControls
* Do the ancestor thing
#COM_ANCESTOR.uTerminate
Endroutine

* ---------------------------------------------------------------------------------
Mthroutine Name(uExecute) Options(*REDEFINE)
* Do the ancestor thing
#COM_ANCESTOR.uExecute Gotofreestate(#GotoFreeState) Switchcallerreference(#SwitchCallerReference)
* Asynchronously start a LoadNew (new data) or Load (existing data) request
If (#COM_OWNER.CheckForUnsavedChanges( False ))
#COM_OWNER.avQueueAsyncOperation Operationid(Load + #COM_OWNER.avAlphaArg1)
#GotoFreeState := False /* Don't go back to a free state until async operations complete */
Endif
Endroutine

* ---------------------------------------------------------------------------------
Mthroutine Name(avExecuteAsyncOperation) Options(*REDEFINE)
<<COND_MD>>* Clear any visible errors
<<COND_MD>>#Com_Owner.avClearMDControlErrors
* Handle the requested async operation
Case (#OperationID)
When (= LoadNew)    /* Create new <<BUSINESS_OBJECT_CAPTION_SINGULAR>>            */ 
#COM_OWNER.LoadNew ClearMessagesAfterDelay(#ClearMessagesAfterDelay)
When (= Load)       /* Display/edit existing <<BUSINESS_OBJECT_CAPTION_SINGULAR>> */
#COM_OWNER.Load ClearMessagesAfterDelay(#ClearMessagesAfterDelay)
When (= SaveNew)    /* Save new <<BUSINESS_OBJECT_CAPTION_SINGULAR>>              */
#COM_OWNER.SaveNew ClearMessagesAfterDelay(#ClearMessagesAfterDelay)
When (= Save)       /* Save existing <<BUSINESS_OBJECT_CAPTION_SINGULAR>>         */
#COM_OWNER.Save ClearMessagesAfterDelay(#ClearMessagesAfterDelay)
When (= Delete)     /* Delete <<BUSINESS_OBJECT_CAPTION_SINGULAR>>                */
#COM_OWNER.Delete ClearMessagesAfterDelay(#ClearMessagesAfterDelay)
Endcase
Endroutine

* ---------------------------------------------------------------------------------
Mthroutine Name(LoadNew) Access(*PRIVATE)
Define_Map For(*Output) Class(#prim_Boln) Name(#ClearMessagesAfterDelay) 
Define_Com Class(<<SERVER_MODULE>>.InitializeNewData) Name(#InitializeNewData)
* Annotate Img=%partdir%VF_UM501_AutoScrud_Slide8.PNG width=1000 height=339 <<COND_AUTOSCRUD>>
* Ask the server to initialize all fields to create a new data item
#InitializeNewData.Execute Alldataitems(#AllDataItems)
* Get those intial values into this program
Get_Entry Number(1) From_List(#AllDataItems)
* Set the buttons to their initial state 
Set Com(#Save_Button #Delete_Button #Another_Button) Visible(False)
* Set the keys fields to be input capable
Set Com(<<EXPAND_KEYS>>) ReadOnly(False)
Set Com(<<EXPAND_VIRTUAL>>) Visible(False)
#Save_Button.ComponentTag := SaveNew
#DataItemPanel.Enabled := True
* Scroll to the first control in the panel
If_Ref Com(#DataItemPanel.ComponentControls<1>) Is_Not(*NULL)
#DataItemPanel.VerticalScrollTo Control(#DataItemPanel.ComponentControls<1>) Scrollposition(Top)
Endif
* Handle a failure 
Evtroutine Handling(#InitializeNewData.Failed) Handled(#Handled)
#Handled := #AVFRAMEWORKMANAGER.avHandleServerError( #COM_OWNER #ServerModuleResult )
Endroutine
Endroutine

* ---------------------------------------------------------------------------------
Mthroutine Name(Load) Access(*PRIVATE)
Define_Map For(*Output) Class(#prim_Boln) Name(#ClearMessagesAfterDelay) 
Define_Com Class(<<SERVER_MODULE>>.GetData) Name(#GetData)
* Annotate Img=%partdir%VF_UM501_AutoScrud_Slide5.PNG width=1000 height=339 <<COND_AUTOSCRUD>>
* Get the access keys from the associated instance and set them up to map to the server
<<EXPAND_MAPINSTANCETOKEYS>> <<PARM1=Com_Self.avAssociatedInstance>>
Inz_List Named(#AccessKeys)
* Ask the server to get details of that data item
#GetData.Execute Accesskeys(#AccessKeys) Alldataitems(#AllDataItems) Servermoduleresult(#ServerModuleResult)
* If found we are good to go
If (#ServerModuleResult)
#ClearMessagesAfterDelay := True
Get_Entry Number(1) From_List(#AllDataItems)
Set Com(#Save_Button #Another_Button) Visible(False)
#Delete_Button.Visible := True
#DataItemPanel.Enabled := True
Set Com(<<EXPAND_VIRTUAL>>) Visible(True)
#Save_Button.ComponentTag := Save
Else
Change Field(#AllDataItems) To(*null)
Set Com(#Save_Button #Delete_Button #Another_Button) Visible(False)
#DataItemPanel.Enabled := False
Set Com(<<EXPAND_VIRTUAL>>) Visible(False)
Endif
* Set the keys fields to be non changeable
Set Com(<<EXPAND_KEYS>>) ReadOnly(True)
* Handle a failure 
Evtroutine Handling(#GetData.Failed) Handled(#Handled)
#Handled := #AVFRAMEWORKMANAGER.avHandleServerError( #COM_OWNER #ServerModuleResult )
Endroutine
Endroutine

* ------------------------------------------------------------------------------
Mthroutine Name(avHandleTrackedControlChange) Options(*REDEFINE)
#Save_Button.Visible := #DataItemPanel.Enabled
<<COND_MD>>If (#ControlMD *IsNot *null)
<<COND_MD>>#ControlMD.ClearError
<<COND_MD>>Endif
<<COND_MD>>If (#ControlMDDT *IsNot *null)
<<COND_MD>>#ControlMDDT.ClearError
<<COND_MD>>Endif
Endroutine
<<COND_MD>>
<<COND_MD>>* ------------------------------------------------------------------------------
<<COND_MD>>Mthroutine Name(avValidateTrackedMDControl) Options(*REDEFINE)
<<COND_MD>>#IsValid := True
<<COND_MD>>If (#ControlMD_Edit *IsNot *null)
<<COND_MD>>#IsValid := #ControlMD_Edit.Validate( #ForOperation #<<EXPAND_PHYSICAL>> )
<<COND_MD>>If ((#IsValid.Not) And (#ErrorCount = 0))
<<COND_MD>>#DataItemPanel.VerticalScrollTo Control(#ControlMD_Edit) Scrollposition(Visible)
<<COND_MD>>Endif
<<COND_MD>>Endif
<<COND_MD>>If (#ControlMD_DateTime *IsNot *null)
<<COND_MD>>#IsValid := #ControlMD_DateTime.Validate( #ForOperation #<<EXPAND_PHYSICAL>> )
<<COND_MD>>If ((#IsValid.Not) And (#ErrorCount = 0))
<<COND_MD>>#DataItemPanel.VerticalScrollTo Control(#ControlMD_DateTime) Scrollposition(Visible)
<<COND_MD>>Endif
<<COND_MD>>Endif
<<COND_MD>>Endroutine

* ---------------------------------------------------------------------------------
Mthroutine Name(CheckClientSideValidation) Access(*PRIVATE)
Define_Map For(*INPUT) Class(#PRIM_ALPH) Name(#ForOperation)
Define_Map For(*RESULT) Class(#Prim_Boln) Name(#AllValid)
<<COND_NOT_MD>>* Add client side validation logic here
<<COND_NOT_MD>>#AllValid := True
<<COND_MD>>#COM_OWNER.avValidateAllTrackedMDControls Foroperation(#ForOperation) Allvalid(#AllValid)
<<COND_MD>>* Add any additional client side validation logic here
Endroutine

* ---------------------------------------------------------------------------------
Mthroutine Name(Save) Access(*PRIVATE)
Define_Map For(*Output) Class(#prim_Boln) Name(#ClearMessagesAfterDelay) 
Define_Com Class(<<SERVER_MODULE>>.PutData) Name(#PutData)
* Annotate Img=%partdir%VF_UM501_AutoScrud_Slide6.PNG width=1000 height=339 <<COND_AUTOSCRUD>>
* Ask the server save the editable data items
Inz_List Named(#EditableDataItems)
#PutData.Execute Editabledataitems(#EditableDataItems) Servermoduleresult(#ServerModuleResult)
If (#ServerModuleResult)
#ClearMessagesAfterDelay := True
#AVLISTMANAGER.AddtoList <<EXPAND_ADDTOLIST>> <<PARM1=False>>
Set Com(#Save_Button) Visible(False)
Endif
* Handle a failure 
Evtroutine Handling(#PutData.Failed) Handled(#Handled)
#Handled := #AVFRAMEWORKMANAGER.avHandleServerError( #COM_OWNER #ServerModuleResult )
Endroutine
Endroutine

* ---------------------------------------------------------------------------------
Mthroutine Name(SaveNew) Access(*PRIVATE)
Define_Map For(*Output) Class(#prim_Boln) Name(#ClearMessagesAfterDelay) 
Define_Com Class(<<SERVER_MODULE>>.PutData) Name(#PutData)
* Annotate Img=%partdir%VF_UM501_AutoScrud_Slide6.PNG width=1000 height=339 <<COND_AUTOSCRUD>>
* Ask the server save the editable data items
Inz_List Named(#EditableDataItems)
#PutData.Execute Editabledataitems(#EditableDataItems) Servermoduleresult(#ServerModuleResult)
If (#ServerModuleResult)
#ClearMessagesAfterDelay := True
#AVLISTMANAGER.AddtoList <<EXPAND_ADDTOLIST>>
#Save_Button.Visible := False
#Another_Button.Visible := True
#DataItemPanel.Enabled := False
Endif
* Handle a failure 
Evtroutine Handling(#PutData.Failed) Handled(#Handled)
#Handled := #AVFRAMEWORKMANAGER.avHandleServerError( #COM_OWNER #ServerModuleResult )
Endroutine
Endroutine

* ---------------------------------------------------------------------------------
Mthroutine Name(Delete) Access(*PRIVATE)
Define_Map For(*Output) Class(#prim_Boln) Name(#ClearMessagesAfterDelay)
Define_Com Class(<<SERVER_MODULE>>.DeleteData) Name(#DeleteData)
* Annotate Img=%partdir%VF_UM501_AutoScrud_Slide7.PNG width=1000 height=339 <<COND_AUTOSCRUD>>
* Get the access keys from the associated instance and set them up to map to the server
<<EXPAND_MAPINSTANCETOKEYS>> <<PARM1=Com_Self.avAssociatedInstance>>
Inz_List Named(#AccessKeys)
* Ask the server to delete the associated row
#DeleteData.Execute Accesskeys(#AccessKeys) Servermoduleresult(#ServerModuleResult)
* Handle a good result
If (#ServerModuleResult)
#ClearMessagesAfterDelay := True
#AVLISTMANAGER.RemovefromList Dataitem(#Com_Self.avAssociatedInstance)
Set Com(#Save_Button #Delete_Button) Visible(False)
#DataItemPanel.Enabled := False
Endif
* Handle a failure 
Evtroutine Handling(#DeleteData.Failed) Handled(#Handled)
#Handled := #AVFRAMEWORKMANAGER.avHandleServerError( #COM_OWNER #ServerModuleResult )
Endroutine
Endroutine

* ---------------------------------------------------------------------------------
Evtroutine Handling(#Save_Button.Click)
Define_com #Prim_Boln #ClientSideValid 
If (#Save_Button.ComponentTag = Save)
#ClientSideValid := #COM_OWNER.CheckClientSideValidation( Update )
else
#ClientSideValid := #COM_OWNER.CheckClientSideValidation( Insert )
endif
If (#ClientSideValid)
#COM_OWNER.avQueueAsyncOperation Operationid(#Save_Button.ComponentTag) Busystatetext(*MTXTUF_Saving)
Endif
Endroutine

* ---------------------------------------------------------------------------------
Evtroutine Handling(#Delete_Button.Click)
If (#COM_OWNER.CheckClientSideValidation( Delete ))
#COM_OWNER.avQueueAsyncOperation Operationid(Delete) Busystatetext(*MTXTUF_Delete)
Endif
Endroutine

* ---------------------------------------------------------------------------------
Evtroutine Handling(#Another_Button.Click)
#COM_OWNER.avQueueAsyncOperation Operationid(LoadNew) Busystatetext(*MTXTUF_Loading)
Endroutine

* ------------------------------------------------------------------------------
* Indicate back to framework whether a close operation is currently allowed
Mthroutine Name(uQueryCanClose) Options(*REDEFINE)
#COM_OWNER.CheckForUnsavedChanges Timeoutinprogress(#TimeOutinProgress) Allowtoproceed(#Allow)
Endroutine

* --------------------------------------------------------------------------
* Returns True (Go ahead) or False (there are changes AND the user wants to save them)
Mthroutine Name(CheckForUnsavedChanges)
Define_Map For(*INPUT) Class(#prim_boln) Name(#TimeOutinProgress)
Define_Map For(*result) Class(#prim_boln) Name(#AllowtoProceed)
* If a save operation is pending and not timed out
If (#Save_Button.Visible And #TimeOutinProgress.Not)
#AllowtoProceed := (#SYS_WEB.Confirm( (*MTXTUF_MSG_0009.Substitute((<<EXPAND_KEYSASVALUES>>)))) = Cancel)
Else
#AllowtoProceed := True /* Default */
Endif
Endroutine

End_Com
