* ---------------------------------------------------------------------------------------------------
* This is a server module in framework <<FRAMEWORK>>.
* It belongs to business object <<BUSINESS_OBJECT_CAPTION>>.
* Created <<CREATEDDATE>> by <<CREATEDUSER>> with Windows desktop style controls.<<COND_NOT_MD>>
* Created <<CREATEDDATE>> by <<CREATEDUSER>> with Material Design style controls.<<COND_MD>>  
* In this usage diagram it is highlighted in ORANGE:
* Annotate Img=%partdir%VF_UM501_SearchCustom_Slide2.PNG width=1000 height=339
* Note: If you can’t see the diagram, go to the Home tab, then move across into the Design area.
*       Click on the bottom right image that has the hint “Toggle Annotation Enabled/Disabled state”.
* ---------------------------------------------------------------------------------------------------
Begin_Com Role(*EXTENDS #PRIM_SRVM) Sessionidentifier('VLFONE')
* ---------------------------------------------------------------------------------
* Declare the shared server system manager. It must be declared exactly this
* way in any server modules or reusable parts that want to use it.
Define_Com Class(#<<SERVER_MANAGER>>) Name(#ServerSystemManager) Scope(*APPLICATION)
* These strings coming from the logon validator. They allow the logon validator to pass information
* into your shared server system manager. For example, an IBM i library list to be used, or
* details about the currently logged on user or other system states.
Define Field(#Persistent_ApplicationString1) Type(*NVARCHAR)
Define Field(#Persistent_ApplicationString2) Type(*NVARCHAR)
Define Field(#Persistent_ApplicationString3) Type(*NVARCHAR)
Define Field(#Persistent_ApplicationString4) Type(*NVARCHAR)
Define Field(#Persistent_ApplicationString5) Type(*NVARCHAR)
Define Field(#Persistent_EventDetails) Reffld(#std_strng)

Persist Fields(#Persistent_ApplicationString1 #Persistent_ApplicationString2 #Persistent_ApplicationString3 #Persistent_ApplicationString4 #Persistent_ApplicationString5 #Persistent_EventDetails)


* ------------------------------------------------------------------------------------------------
* Remove this field definition
Define Field(#ReplaceMe) Type(*Char) Length(15) Desc('Placeholder field') Default('Replace Me')

* Group the fields that are used as search values
* - Replace field #ReplaceMe with your search fields
Group_By Name(#XG_SearchFields) Fields(#ReplaceMe)
Def_List Name(#SearchFields) Fields(#XG_SearchFields) Type(*Working) Entrys(1)

Define Field(#InstanceList_Count) Reffld(#Std_Int)
Def_List Name(#InstanceList_Columns) Fields(<<EXPAND_INSTANCELISTNAMES>>) Counter(#InstanceList_Count) Type(*Working) Entrys(*MAX)

* ------------------------------------------------------------------------------------------------
Srvroutine Name(Search) Session(*REQUIRED)

List_Map For(*input) List(#SearchFields)
List_Map For(*OUTPUT) List(#InstanceList_Columns)

* Invoke the server manager to set up the execution context for this server routine
#ServerSystemManager.InitializeServiceRoutine Persistentstring1(#Persistent_ApplicationString1) Persistentstring2(#Persistent_ApplicationString2) Persistentstring3(#Persistent_ApplicationString3) Persistentstring4(#Persistent_ApplicationString4) Persistentstring5(#Persistent_ApplicationString5) Event_Component(#COM_OWNER) Persistent_Eventdetails(#Persistent_EventDetails)


* get the search values from the received list into fields
Get_Entry Number(1) From_List(#SearchFields)

* Get the records you want from the Table.
Select Fields(#InstanceList_Columns) From_File(<<EXPAND_FIRSTVIEW>>)
* Test the database fields against the search values here
* if (#MySearchValue = #databaseField )

Add_Entry To_List(#InstanceList_Columns)
* Endif
Endselect


* Invoke the server manager to clean up and finalize the execution context for this server routine
#ServerSystemManager.TerminateServiceRoutine Event_Component(#COM_OWNER)


Endroutine

End_Com
