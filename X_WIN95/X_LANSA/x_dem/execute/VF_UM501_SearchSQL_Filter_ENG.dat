* ---------------------------------------------------------------------------------------------------
* This is a view filter in framework <<FRAMEWORK>>.
* It belongs to business object <<BUSINESS_OBJECT_CAPTION>>.
* Created <<CREATEDDATE>> by <<CREATEDUSER>> with Windows desktop style controls.<<COND_NOT_MD>>
* Created <<CREATEDDATE>> by <<CREATEDUSER>> with Material Design style controls.<<COND_MD>> 
*
* Note 1
* The server module associated with this filter may need to be modified if this filter uses a file defined to lansa as an OTHER file, and the actual field name in the file is different from the name given to the field by LANSA. See the server module for details.
* 
* Note 2.
* This filter will need to be tested for its performance impact before being deployed.
* You may find that certain combinations of search values result in a big performance load on the server. 
*
* In this usage diagram it is highlighted in GREEN:
* Annotate Img=%partdir%VF_UM501_SearchSQL_Slide1.PNG width=1000 height=339
* Note: If you can’t see the diagram, go to the Home tab, then move across into the Design area.
*       Click on the bottom right image that has the hint “Toggle Annotation Enabled/Disabled state”.
* ---------------------------------------------------------------------------------------------------
Begin_Com Role(*EXTENDS #VF_AC007O) Height(182) Width(215)
* ================================================================================
* Simple Field, Group and Condition Definitions
* ================================================================================
Group_By Name(#XG_SearchFields) Fields(<<EXPAND_KEYSGROUP>>)

Def_List Name(#SearchFields) Fields(#XG_SearchFields) Type(*Working) Entrys(1)

* ---------------------------------------------------------------------------------
Define_Com Class(#Prim_panl) Name(#DataItemPanel) Parent(#COM_OWNER) Displayposition(1) Tabposition(1) Height(150) Left(0) Top(0) Width(215) Horizontalscroll(True) Verticalscroll(True) Tabstop(False)  Layoutmanager(#FlowLayout1)
Define_Com Class(#Prim_panl) Name(#ButtonPanel) Parent(#COM_OWNER) Displayposition(2) Tabposition(2) Left(0) Top(150) Width(215) Layoutmanager(#ButtonPanelAttachmenthManager) Height(32) Tabstop(False)
Define_Com Class(#PRIM_ATLI) Name(#AttachDataItemPanel) Manage(#DataItemPanel) Parent(#MainPanelAttachmentManager) Attachment(Center)  Marginright(4) Marginleft(4)
Define_Com Class(#PRIM_ATLI) Name(#AttachButtonPanel) Manage(#ButtonPanel) Parent(#MainPanelAttachmentManager) Attachment(Bottom)  Marginright(4) Marginleft(4)
* ---------------------------------------------------------------------------------
Define_Com Class(#Prim_atlm) Name(#ButtonPanelAttachmenthManager)
Define_Com Class(#Prim_atli) Name(#ButtonPanelAttachmentSave) Parent(#ButtonPanelAttachmenthManager) Manage(#Search_Button) Attachment(Right) Marginright(4) Margintop(4) Marginbottom(4)
Define_Com Class(#PRIM_ATLI) Name(#AttachItem1) Manage(#CLEAR_LIST) Parent(#ButtonPanelAttachmenthManager) Attachment(Left)

* ---------------------------------------------------------------------------------
Define_Com Class(#PRIM_FWLM) Name(#FlowLayout1) Direction(TopToBottom) Sizingrulehor(Maximize)

* Define the flow layout manager entries for the fields and components that are on the data panel

<<EXPAND_PANEL_LAYOUT_GROUP_KEYS>> <<INDEX1=1:1>><<PARM1=Define_Com Class(#PRIM_FWLI) Name(#FlowLayout1Item%INDEX1%) Manage(%NAME%) Parent(#FlowLayout1) >>

* ---------------------------------------------------------------------------------

* Define the button and the check box

<<COND_MD>>Define_Com Class(#PRIM_md.RaisedButton) Name(#Search_Button) Parent(#ButtonPanel) Caption(*MTXTUF_SEARCHUSERS) Displayposition(1) Tabposition(1) Left(449) Top(4) Buttondefault(True)
<<COND_NOT_MD>>Define_Com Class(#Prim_phbn) Name(#Search_Button) Parent(#ButtonPanel) Caption(*MTXTUF_SEARCHUSERS) Displayposition(1) Tabposition(1) Height(24) Left(131) Top(4) Buttondefault(True)

<<COND_MD>>Define_Com Class(#PRIM_MD.CheckBox) Name(#CLEAR_LIST) Caption(*MTXTUF_CLEAR_LIST) Parent(#ButtonPanel) Displayposition(2) Tabposition(2) Checkstate(Checked) Left(0) Top(0) Height(44)
<<COND_NOT_MD>>Define_Com Class(#PRIM_CKBX) Name(#CLEAR_LIST) Caption(*MTXTUF_CLEAR_LIST) Parent(#ButtonPanel) Displayposition(2) Tabposition(2) Buttonstate(Checked) Left(0) Top(0) Height(32)

* ---------------------------------------------------------------------------------

* Define the fields that are on the filter form

<<COND_MD>><<EXPAND_PANEL_LAYOUT_GROUP_KEYS>> <<INDEX1=1:1>> <<INDEX2=4:48>> <<INDEX3=22:0>> <<PARM1=Define_Com Class(%CLASSNAME%.%MDEDITTYPE%)  Name(%NAME%)  Parent(#DataItemPanel) Displayposition(%INDEX1%) Tabposition(%INDEX1%)  Left(0) Captiontype(Caption) Height(48) Helperposition(None) %LABEL% >>
<<COND_NOT_MD>><<EXPAND_PANEL_LAYOUT_GROUP_KEYS>> <<INDEX1=1:1>> <<INDEX2=4:48>> <<INDEX3=22:0>> <<PARM1=Define_Com Class(%CLASSNAME%.Visual)  Name(%NAME%) Parent(#DataItemPanel) Displayposition(%INDEX1%) Tabposition(%INDEX1%) Top(%INDEX2%) Left(4) MarginLeft(0) Width(205) Labelposition(Top)  Margintop(19) Height(40)  Labeltype(Caption)  %LABEL% >>

* ---------------------------------------------------------------------------------

* The list used to receive data from the file access Server Module

Def_List Name(#InstanceList_Columns) Fields(<<EXPAND_INSTANCELISTNAMES>>) Counter(#ListCount) Type(*Working) Entrys(*Max)

* ================================================================================
* Routines
* ================================================================================


Mthroutine Name(uInitialize) Options(*Redefine)

* Do any initialization defined in the ancestor

#Com_Ancestor.uInitialize

#COM_OWNER.avFilterLocation := LEFT /* This filter is on the left */
#COM_OWNER.avAllowLocationChange := True /* Allow user to move filter */
#COM_OWNER.avAllowExpandContract := True /* Allow filter to be expanded and contracted */

* <your initialize logic goes here>

Endroutine


Evtroutine Handling(#Search_Button.Click)
#Com_Owner.uSelectData
Endroutine


Mthroutine Name(uSelectData)

* Define the data service
Define_Com Class(<<SERVER_MODULE>>.Search) Name(#Search)

#avFrameworkManager.avClearMessages Requester(#com_self)

* Save the current key values
Inz_List Named(#SearchFields)

* Go to busy state
#COM_OWNER.avGotoBusyState Showbusytext('Searching') Animated(False)

* Ask Server Module to get the data from the server
#Search.ExecuteAsync SearchFields(#SearchFields) InstanceList_Columns(#InstanceList_Columns)


Evtroutine Handling(#Search.Completed)

<<COND_MD>>If Cond(#CLEAR_LIST.CheckState *EQ Checked)
<<COND_NOT_MD>>If Cond(#CLEAR_LIST.ButtonState *EQ Checked)
#AVLISTMANAGER.ClearList
Endif

* To show images in an instance list you need to create them first

* Define a #PRIM_BMP object
* Define_Com Class(#prim_BMP) Name(#uImageCross) Reference(*DYNAMIC)

* Now create the bitmap using either an image file or a blob
* #uImageCross <= #SYS_APPLN.CreateBitmap( VLFONE/Images/black/medium/cross.png )
* or
* #uImageCross <= #SYS_APPLN.CreateBitmap( #xEmployeeImageThumbnail )

* Now you can pass #uImageCross as IColumn1 2 or 3
* #AVLISTMANAGER.AddtoList ..... Icolumn1(#uImageCross)

Selectlist Named(#InstanceList_Columns)

* Add instance details to the instance list

#AVLISTMANAGER.AddtoList <<EXPAND_ADDTOLIST>>

Endselect

Clr_List Named(#InstanceList_Columns)

* Restore the saved key values
Get_Entry Number(1) From_List(#SearchFields)

* Get any warning messages issued by the search
#avFrameworkManager.avReceiveSystemMessageQueue Requester(#Com_Self)

* Go back to display free state
#com_Owner.avGotoFreeState

Endroutine

* Handle a failure
Evtroutine Handling(#Search.Failed) Handled(#Handled)
#Handled := #AVFRAMEWORKMANAGER.avHandleServerError( #COM_OWNER )
Endroutine

Endroutine

End_Com
