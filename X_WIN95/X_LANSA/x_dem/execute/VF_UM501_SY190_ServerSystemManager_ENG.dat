* ------------------------------------------------------------------------------------------------
* This is a generated example of a shared server system manager.
* Add new methods, properties and events to this object as you see fit.
* Created <<CREATEDDATE>> by <<CREATEDUSER>> with Windows desktop style controls.<<COND_NOT_MD>>
* Created <<CREATEDDATE>> by <<CREATEDUSER>> with Material Design style controls.<<COND_MD>>  
* ------------------------------------------------------------------------------------------------
Begin_Com Role(*EXTENDS #PRIM_OBJT)

* The shared code base manager
Define_Com Class(#VF_SY001X) Name(#uSystemCommon) Scope(*APPLICATION)

* ----------------------------------------------------------------------------------------------------------
* Initialize the execution context for a server module
* ----------------------------------------------------------------------------------------------------------
Mthroutine Name(InitializeServiceRoutine)
Define_Map For(*Both) Class(#Prim_dc.UnicodeString) Name(#PersistentString1)
Define_Map For(*Both) Class(#Prim_dc.UnicodeString) Name(#PersistentString2)
Define_Map For(*Both) Class(#Prim_dc.UnicodeString) Name(#PersistentString3)
Define_Map For(*Both) Class(#Prim_dc.UnicodeString) Name(#PersistentString4)
Define_Map For(*Both) Class(#Prim_dc.UnicodeString) Name(#PersistentString5)
Define_Map For(*INPUT) Class(#PRIM_ALPH) Name(#Persistent_EventDetails) Mandatory('<<NONE>>')
Define_Map For(*INPUT) Class(#PRIM_OBJT) Name(#Event_Component) Mandatory(*NULL) Help('The component issuing the event information. Use #Com_Owner in most circumstances.') Pass(*BY_REFERENCE)


#uSystemCommon.Initialize Invlfonemode(False) Ibmiwebserver(*osapi = IBMI) Apptracemode(False) Systracemode(False) Persistent_Eventdetails(#Persistent_EventDetails)


* Do any execution context initialization at the start of any server module
* For example, set the user profile that all Server Module jobs will run 
* under, or set the library list that all Server Module jobs will run under

* For example, you might consider altering LANSA’s audit user here using the 
* SET_SESSION_VALUE built-in function: 
* Use Builtin(SET_SESSION_VALUE) With_Args(USER_AUDIT <<user name>>)
* https://%lansadocs%/lansa015/index.htm#lansa/ladtgub4_user_variables.htm?Highlight=USER_AUDIT

* As another example, this is an IBM i CL program that validates a user profile and 
* password and then changes the current IBM i job to run under that profile. It also 
* contains outline code to change the job’s library list.   
*
* PGM        PARM(&USERPROF &PASSWORD &CHANGEJOB &CHANGELIBL &HANDLE +
*             &RETCODE &ERRORMSG)
*
*/* Check that the passed User Id and Password are valid */
*/* Status Codes Returned :                              */
*/* OK = USER OK                                         */
*/* IU = INVALID USER ID                                 */
* /* IP = INVALID PASSWORD                                */
*/* EX = PASSWORD EXPIRED                                */
*/* UD = USER PROFILE DISABLED                           */
*/* ER = UNEXPECTED ERROR                                */

*/* Received Parms */
*DCL        VAR(&USERPROF) TYPE(*CHAR) LEN(10)
*DCL        VAR(&PASSWORD) TYPE(*CHAR) LEN(128)
*DCL        VAR(&CHANGEJOB) TYPE(*CHAR) LEN(1)
*DCL        VAR(&CHANGELIBL) TYPE(*CHAR) LEN(1)
*DCL        VAR(&HANDLE) TYPE(*CHAR) LEN(12)
 
*/* Returned Parms */
*DCL        VAR(&RETCODE) TYPE(*CHAR) LEN(2)
*DCL        VAR(&ERRORMSG) TYPE(*CHAR) LEN(132)
 
*/* Local Variables */
*DCL        VAR(&RTNVAR) TYPE(*CHAR) LEN(8) VALUE(X'0000000000000000')
 
*/* Check User and Password for OS/400 V5R3 onwards */
*/* You should also symetrically call IBM API QSYRLSPH to */
*/* release the profile handle. */
 
*CALL       PGM(QSYGETPH) PARM(&USERPROF &PASSWORD &HANDLE &RTNVAR +
*             X'00000080' X'00000000')
 
*/* Invalid User                                             */
*MONMSG     MSGID(CPF2203 CPF2204) EXEC(DO)
*CHGVAR     VAR(&RETCODE) VALUE('IU')
*CHGVAR     VAR(&ERRORMSG) VALUE('Invalid or unknown user profile.')
*GOTO       CMDLBL(END)
*ENDDO
 
*/* Unable to check this user                               */
*MONMSG     MSGID(CPF22E9 CPF2213 CPF2217 CPF4AB8) EXEC(DO)
*CHGVAR     VAR(&RETCODE) VALUE('UV')
*CHGVAR     VAR(&ERRORMSG) VALUE('Unable to access user profile details.')
*GOTO       CMDLBL(END)
*ENDDO
 
*/* Password is invalid */
*MONMSG     MSGID(CPF22E2) EXEC(DO)
*CHGVAR     VAR(&RETCODE) VALUE('IP')
*CHGVAR     VAR(&ERRORMSG) VALUE('Invalid password.')
*GOTO       CMDLBL(END)
*ENDDO
 
*/* This profile has no password */
*MONMSG     MSGID(CPF22E5) EXEC(DO)
*CHGVAR     VAR(&RETCODE) VALUE('NO')
*CHGVAR     VAR(&ERRORMSG) VALUE('No Password exists for this user.')
*GOTO       CMDLBL(END)
*ENDDO
 
*/* Profile is disabled */
*MONMSG     MSGID(CPF22E3) EXEC(DO)
*CHGVAR     VAR(&RETCODE) VALUE('UD')
*CHGVAR     VAR(&ERRORMSG) VALUE('User Profile is disabled.')
*GOTO       CMDLBL(END)
*ENDDO
 
*/* Password has expired */
*MONMSG     MSGID(CPF22E4) EXEC(DO)
*CHGVAR     VAR(&RETCODE) VALUE('EX')
*CHGVAR     VAR(&ERRORMSG) VALUE('The password has expired.')
*GOTO       CMDLBL(END)
*ENDDO
 
*/* Unspecified error */
*MONMSG     MSGID(MCH0000 CPF0000) EXEC(DO)
*CHGVAR     VAR(&RETCODE) VALUE('ER')
*CHGVAR     VAR(&ERRORMSG) VALUE('No error message available')
*RCVMSG     MSG(&ERRORMSG)
*MONMSG     MSGID(MCH0000 CPF0000)
*GOTO       CMDLBL(END)
*ENDDO
 
*/*    No error so far so swap job to be that user      */

* IF         COND(&CHANGEJOB = 'Y') THEN(DO)

*CHGVAR     VAR(&RTNVAR) VALUE(X'0000000000000000')

*CALL       PGM(QWTSETP) PARM(&HANDLE &RTNVAR)

*MONMSG     MSGID(MCH0000 CPF0000) EXEC(DO)
*CHGVAR     VAR(&RETCODE) VALUE('ER')
*CHGVAR     VAR(&ERRORMSG) VALUE('Error on call to QWTSETP ')
*RCVMSG     MSG(&ERRORMSG)
*MONMSG     MSGID(MCH0000 CPF0000)
*GOTO       CMDLBL(END)
*ENDDO

*ENDDO

*/*    No error so far change the library list     */

*IF         COND(&CHANGELIBL = 'Y') THEN(DO)

*CHGLIBL    LIBL(QGPL XXXXX YYYYYY ZZZZZZ QQQQQQQ)

*MONMSG     MSGID(MCH0000 CPF0000) EXEC(DO)
*CHGVAR     VAR(&RETCODE) VALUE('ER')
*CHGVAR     VAR(&ERRORMSG) VALUE('Unknown error in CHGLIBL')
*RCVMSG     MSG(&ERRORMSG)
*MONMSG     MSGID(MCH0000 CPF0000)
*GOTO       CMDLBL(END)
*ENDDO
*
*ENDDO

*/* No error at all if we reach this point in the code */

*CHGVAR     VAR(&RETCODE)  VALUE('OK')
*CHGVAR     VAR(&ERRORMSG) VALUE(' ')

*/* End the program */

*END: ENDPGM 


Endroutine

* ----------------------------------------------------------------------------------------------------------
* Clean up and terminate the execution context for a server module
* ----------------------------------------------------------------------------------------------------------
Mthroutine Name(TerminateServiceRoutine)
Define_Map For(*INPUT) Class(#PRIM_OBJT) Name(#Event_Component) Mandatory(*NULL) Help('The component issuing the event information. Use #Com_Owner in most circumstances.') Pass(*BY_REFERENCE)

* Define_Com Class(#STD_INT) Name(#Elapsedtime)


* Do any clean up when the server module's routine has ended. 

* For example, if you use initialization logic like the preceding CL program example then you should 
* also symmetrically use CL program logic like this to free the user profile handle:  

*PGM        PARM(&HANDLE)
*/* Received Parms */
*DCL        VAR(&HANDLE) TYPE(*CHAR) LEN(12)
*CALL       PGM(QSYRLSPH) PARM(&HANDLE)
*MONMSG     MSGID(CPF0000 MCH0000)
*/* End the program */
*END: ENDPGM 

* For example - if recording events
* If (#uSystemCommon.IsInitialized)
* #ElapsedTime := (#VF_ELDTU.Now.AsSeconds - #uSystemCommon.StartDatetime.AsSeconds) * 1000
* #uSystemCommon.avWriteEvent Event_Identifier('Terminate_Service_Routine') Event_Type('END') Event_Component(#Event_Component) Event_Elapsedtime(#ElapsedTime)
* Endif



Endroutine

* ----------------------------------------------------------------------------------------------------------
* Build an SQL WHERE clause
* ----------------------------------------------------------------------------------------------------------
Mthroutine Name(uMakeWhereString)
Define_Map For(*both) Class(#prim_alph) Name(#uWhere) Help('The string to contain the where clause')
Define_Map For(*input) Class(#prim_alph) Name(#uCompareValue) Help('The value to be compared, as a string')
Define_Map For(*input) Class(#prim_alph) Name(#uLongName) Help('The field long name')
Define_Map For(*input) Class(#prim_alph) Name(#uShortname) Help('The field short name')
Define_Map For(*input) Class(#prim_boln) Name(#uUnicode) Mandatory(False) Help('Is the field a unicode field True/False')
Define_Map For(*input) Class(#prim_alph) Name(#uType) Help('The type of field - ALPHA NUMERIC DATE DATETIME ')
Define_Map For(*input) Class(#prim_alph) Name(#uOperator) Help('The comparison operation - BEGINS CONTAINS ENDS GT GE LT LE EQ')
Define_Map For(*input) Class(#prim_alph) Name(#uNoSearchValue) Mandatory('<<UNSPECIFIED>>') Help('The value that indicates that no search is required - May be unspecified in which case standard values like blank/0 are used')
Define_Map For(*input) Class(#prim_boln) Name(#uIgnoreCase) Mandatory(False) Help('Is the search to be case insensitive - True/False')
Define_Map For(*INPUT) Class(#prim_alph) Name(#uANDOR) Mandatory('AND') Help('Build the where clause using AND or OR')
Define_Map For(*INPUT) Class(#prim_boln) Name(#uCompareAsString) Mandatory(False) Help('Compare the search value with the field converted to a string - True/False')
Define_Map For(*both) Class(#prim_boln) Name(#uValid) Help('Is the where clause valid? (does not contain embedded blanks, quotes etc)  - True/False')

Define_Com Class(#prim_alph) Name(#Char1)
Define_Com Class(#prim_Alph) Name(#Char2)

If (#uValid)
* You must add your own SQL Injection checking here

* Elementary checks on user entered data which may contain SQL Injection
#uCompareValue := #uCompareValue.Trim
If (#uCompareValue.Contains( ' ' ) Or #uCompareValue.Contains( #QUOTE ) Or #uCompareValue.Contains( ';' ) Or #uCompareValue.Contains( '"' ))
* embedded blanks or quote or SQL new statement
#uValid := False
Return
Endif


If (#uNoSearchValue *EQ '<<UNSPECIFIED>>')
* Exclude searches for the standard default values
Case (#uType.Uppercase)
When (= ALPHA)
If (#uCompareValue = *BLANKS)
Return
Endif
When (= NUMERIC)
If (#uCompareValue.IsNumber AndIf (#uCompareValue.AsNumber = 0))
Return
Endif
If (#uCompareValue = *blanks)
Return
Endif
When (= DATE)
If (#uCompareValue.IsDate( ISO ))
If (#uCompareValue.AsDate( ISO ).IsNull Or #uCompareValue.AsDate( ISO ).IsSqlNull)
Return
Endif
Endif
When (= DATETIME)
If (#uCompareValue.IsDateTime( ISO ))
If (#uCompareValue.AsDateTime( ISO ).IsNull Or #uCompareValue.AsDateTime( ISO ).IsSqlNull)
Return
Endif
Endif

Endcase
Else
* Exclude searches based on the NoSearchValue
If (#uCompareValue = #uNoSearchValue)
Return
Endif
Endif


* Add an AND or OR if there is a previous part of the WHERE statement and we are going to add more to it
If (#uWhere *NE *blanks)
If (#uANDOR = AND)
#uWhere += ' AND '
Else
#uWhere += ' OR '
Endif
Endif

If (#uIgnoreCase And (#uType = ALPHA))
#uCompareValue := #uCompareValue.UpperCase
Endif

* If comparing the field as a string
If (#uCompareAsString And (#uType *NE ALPHA))
If (*OSAPI = IBMI)
*
#CHAR1 := 'VARCHAR('
#CHAR2 := ')'
Else
#CHAR1 := 'CAST ('
#CHAR2 := ' as VARCHAR)'
Endif
Else
#CHAR1 := *NULL
#CHAR2 := *NULL
Endif

If (*OSAPI = IBMI)
If (#uIgnoreCase And (#uType = ALPHA))
#uWhere += '( UPPER(' + #uShortname.UpperCase + ') '
Else
#uWhere += '(' + #CHAR1 + #uShortname.UpperCase + #CHAR2 + ' '
Endif
Else
If (#uIgnoreCase And (#uType = ALPHA))
#uWhere += '( UPPER(' + #uLongName.UpperCase + ') '
Else
#uWhere += '(' + #CHAR1 + #uLongName.UpperCase + #Char2 + ' '
Endif
Endif

Case (#uOperator)
When (= BEGINS = CONTAINS = ENDS)
#uWhere += ' LIKE '

When (= GT)
#uWhere += ' >  '

When (= GE)
#uWhere += ' >=  '

When (= LT)
#uWhere += ' <  '

When (= LE)
#uWhere += ' <=  '

When (= EQ)
#uWhere += ' =  '

Endcase

If (#uUnicode)
If (*OSAPI = IBMI)
* Convert string to unicode so it can be compared with the unicode field
#uWhere += N
Endif
Endif

If ((#uType *NE NUMERIC) *Or (#uCompareAsString))
#uWhere += #QUOTE
Endif

Case (#uOperator)
When (= CONTAINS = ENDS)
#uWhere += '%'
Endcase

#uWhere += #uCompareValue.Trim

Case (#uOperator)
When (= CONTAINS = BEGINS)
#uWhere += '%'
Endcase

If ((#uType *NE NUMERIC) *Or (#uCompareAsString))
#uWhere += #QUOTE
Endif

#uWhere += ')'

Endif
Endroutine

* ---------------------------------------------------------------------------

* Write an event to the auditing system

Mthroutine Name(avWriteEvent)
Define_Map For(*INPUT) Class(#PRIM_ALPH) Name(#Persistent_Details) Mandatory('<<NONE>>')
Define_Map For(*INPUT) Class(#PRIM_ALPH) Name(#Event_Identifier)
Define_Map For(*INPUT) Class(#PRIM_ALPH) Name(#Event_Type) Mandatory('SINGLE') Help('START, END, or SINGLE')
Define_Map For(*INPUT) Class(#prim_objt) Name(#Event_Component) Desc('Event Component') Help('The component issuing the event information. Use #Com_Owner in most circumstances.') Pass(*BY_REFERENCE)
Define_Map For(*INPUT) Class(#VF_ELURLX) Name(#Event_String) Mandatory('') Help('General purpose string - May be used to pass JSON')
Define_Map For(*INPUT) Class(#VF_ELTXTS) Name(#Event_Text_Short1) Mandatory('') Help('General purpose short text')
Define_Map For(*INPUT) Class(#VF_ELTXTS) Name(#Event_Text_Short2) Mandatory('') Help('General purpose short text')
Define_Map For(*INPUT) Class(#VF_ELTXTS) Name(#Event_Text_Short3) Mandatory('') Help('General purpose short text')

If (#uSystemCommon.IsInitialized)

#uSystemCommon.avWriteEvent Persistent_Details(#Persistent_Details) Event_Identifier(#Event_Identifier) Event_Component(#Event_Component) Event_String(#Event_String) Event_Text_Short1(#Event_Text_Short1) Event_Text_Short2(#Event_Text_Short2) Event_Text_Short3(#Event_Text_Short3)

Else
Message Msgtxt('WriteEvent failed because the ServerSystemManager had not been initialized')

Endif
Endroutine

End_Com