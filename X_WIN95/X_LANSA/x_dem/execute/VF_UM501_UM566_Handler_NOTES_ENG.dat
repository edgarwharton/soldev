* ---------------------------------------------------------------------------------
* This is a command handler in framework <<FRAMEWORK>>.
* It belongs to business object <<BUSINESS_OBJECT_CAPTION>>.
* Created <<CREATEDDATE>> by <<CREATEDUSER>> with Windows desktop style controls.<<COND_NOT_MD>>
* Created <<CREATEDDATE>> by <<CREATEDUSER>> with Material Design style controls.<<COND_MD>>  
* ----------------------------------------------------------------------------------------------------------
Begin_Com Role(*EXTENDS #VF_AC010O) Height(401) Width(857) Layoutmanager(#MainTableLayout)

* --------------------------------------------------------------------------

Define_Com Class(#PRIM_TBLO) Name(#MainTableLayout)
Define_Com Class(#PRIM_TBLO.Column) Name(#Column1) Displayposition(1) Parent(#MainTableLayout) Width(0.96)

Define_Com Class(#PRIM_ATLM) Name(#AttachLayoutLeftPanel)
Define_Com Class(#PRIM_ATLI) Name(#AttachItemLeftNotes) Manage(#NotesList) Parent(#AttachLayoutLeftPanel) Attachment(Center)
Define_Com Class(#PRIM_ATLI) Name(#AttachItemButtonPanel) Parent(#AttachLayoutLeftPanel) Attachment(Bottom) Manage(#ButtonPanel) Margintop(2) Marginbottom(2)

Define_Com Class(#VF_ui049O) Name(#ButtonPanel) Displayposition(2) Parent(#MainPanel_Left) Tabposition(2) Height(30) Top(369) Width(411)

Define_Com Class(#PRIM_ATLM) Name(#AttachLayoutRightPanel)
Define_Com Class(#PRIM_ATLI) Name(#AttachItemRight) Manage(#DF_NOTE_NOTEDETAILPANEL) Parent(#AttachLayoutRightPanel) Attachment(Center)

Define_Com Class(#PRIM_TBLO.ColumnDivider) Name(#Column12Divider) Displayposition(2) Parent(#MainTableLayout)
Define_Com Class(#PRIM_TBLO.Column) Name(#Column2) Displayposition(3) Parent(#MainTableLayout) Width(1.04)
Define_Com Class(#PRIM_TBLO.Row) Name(#Row1) Displayposition(1) Parent(#MainTableLayout)
Define_Com Class(#PRIM_TBLO.Item) Name(#Manage_MainPanel_Left) Parent(#MainTableLayout) Row(#Row1) Column(#Column1) Manage(#MainPanel_Left)
Define_Com Class(#PRIM_TBLO.Item) Name(#Manage_MainPanel_Right) Parent(#MainTableLayout) Row(#Row1) Column(#Column2) Manage(#MainPanel_Right)

Define_Com Class(#Prim_panl) Name(#MainPanel_Left) Parent(#COM_OWNER) Displayposition(1) Tabposition(1) Top(0) Height(401) Left(0) Width(411) Layoutmanager(#AttachLayoutLeftPanel)
Define_Com Class(#Prim_panl) Name(#MainPanel_Right) Parent(#COM_OWNER) Displayposition(2) Tabposition(2) Layoutmanager(#AttachLayoutRightPanel) Height(401) Left(412) Top(0) Width(445)

Define_Com Class(#Prim_List) Name(#NotesList) Parent(#MainPanel_Left) Displayposition(1) Tabposition(1) Height(367) Left(0) Top(0) Width(411) Columnlines(False) Rowlines(False)

Define_Com Class(#PRIM_LIST.String) Name(#ColumnDF_NOTE_Subject) Columnwidth(1) Displayposition(1) Parent(#NotesList) Source(#DF_NOTE_Subject) Sortonclick(True) Columnunits(Proportion)

Define_Com Class(#PRIM_LIST.String) Name(#ColumnDF_NOTE_GUID) Columnwidth(311) Displayposition(2) Parent(#NotesList) Source(#DF_NOTE_GUID) Visible(False) Columnvisible(False)

Define_Com Class(#PRIM_LIST.DateTime) Name(#ColumnDF_NOTE_Updated) Columnwidth(1) Displayposition(3) Parent(#NotesList) Source(#DF_NOTE_Updated) Columnunits(Proportion) Sortonclick(True)

Define_Com Class(#DF_Note_NoteDetailPanel) Parent(#MainPanel_Right) Height(401) Width(445)

Define Field(#DF_NOTE_WorkingList_Counter) Reffld(#Std_int)


* --------------------------------------------------------------------------

Define_Com Class(#DF_NOTE_GUID) Name(#CurrentNoteGUID)
Define_Com Class(#Prim_Boln) Name(#UserInterfaceLocked)

* --------------------------------------------------------------------------
Define_Com Class(#Prim_Boln) Name(#OnSmallScreenDevice)

* --------------------------------------------------------------------------
Def_List Name(#DF_NOTE_ProxyList) Fields(#DF_NOTE_GUID #DF_NOTE_Subject #DF_NOTE_Created #DF_NOTE_CreatedBy #DF_NOTE_Updated #DF_NOTE_UpdatedBy) Counter(#DF_NOTE_WorkingList_Counter) Type(*WORKING) Entrys(*MAX)

* --------------------------------------------------------------------------
Mthroutine Name(uInitialize) Options(*REDEFINE)

* Do ancestor first
#COM_ANCESTOR.uInitialize

* Set up to handle an embedded page
Set Com(#COM_OWNER) Avcontentneedsshielding(True) Avcontentrequiresconstantparentage(True)

* Set up a button bar
#ButtonPanel.uInitialize Flowfrom(Left) Vertical(False)
#ButtonPanel.uAddButton Caption('Make New Note') Id(New) Width(140)
#ButtonPanel.uAddButton Caption('Refresh Notes List') Id(Refresh) Isprimarybutton(False) Width(160)

* Behave differently on small screen devices
#OnSmallScreenDevice := #USYSTEM.uFrameworkManager.avSmallScreen

* Style the list for the form factor
#uSystem.CurrentTheme.avStylePRIM_LISTforFormFactor List(#NotesList)

* Initialize the notes panel
#DF_Note_NoteDetailPanel.uInitialize Useparenthandler(#COM_Self)

Endroutine

* --------------------------------------------------------------------------
Mthroutine Name(uTerminate) Options(*REDEFINE) Access(*PRIVATE)
* Custom code here ....
#ButtonPanel.uTerminate
Clr_List Named(#NotesList)
Clr_List Named(#DF_NOTE_ProxyList)
#DF_Note_NoteDetailPanel.uTerminate
* Do ancestor last
#COM_ANCESTOR.uTerminate
Endroutine
* --------------------------------------------------------------------------
Mthroutine Name(uExecute) Options(*REDEFINE) Access(*PRIVATE)
* Do any ancestor logic first.
#COM_ANCESTOR.uExecute Gotofreestate(#GotoFreeState) Switchcallerreference(#SwitchCallerReference)
* Fill the list
#Com_Owner.LoadNoteList
* Return control and let the free state be returned

Endroutine

* --------------------------------------------------------------------------
Mthroutine Name(uQueryCanClose) Options(*REDEFINE)

If (#CanBeCancelled)
#DF_Note_NoteDetailPanel.SaveCurrentNoteIfDirty Askfirst(#CanBeCancelled)
Endif

#Allow := True

Endroutine

* --------------------------------------------------------------------------
Mthroutine Name(LoadNoteList) Access(*PRIVATE)
Define_Com Class(#DF_NOTE_ServerModule.LoadProxyList) Name(#LoadProxyList)

* Locked
#UserInterfaceLocked := True

* Drop what we already have
Clr_List Named(#NotesList)

* Load the list of notes from the server
#LoadProxyList.Execute Forbusinessobjectnametype(#COM_OWNER.avAssociatedInstance.avBusinessObjectReference.uUserObjectType) Forinstancekey(#COM_OWNER.avAssociatedInstance.CombinedKey) Intoproxyworkinglist(#DF_NOTE_ProxyList)

* UnLocked
#UserInterfaceLocked := False

* Handle good result 
Evtroutine Handling(#LoadProxyList.Completed)

* Transfer them into the visible list
Selectlist Named(#DF_NOTE_ProxyList)
Add_Entry To_List(#NotesList)
Endselect

* Show nothing
#DF_Note_NoteDetailPanel.ShowNothing

* Show just the left panel on small devices
#Com_Owner.ShowLeftPanelonSmallDevice

* Handle smaller captions
If (#AVFRAMEWORKMANAGER.avSmallScreen)
If (#COM_OWNER.avAssociatedInstance *IsNot *null)
#COM_OWNER.avTitleBarCaption := #COM_OWNER.avAssociatedInstance.avVisualID1
Else
#COM_OWNER.avTitleBarCaption := "Unknown"
Endif
Endif

Endroutine

* Handle failure 
Evtroutine Handling(#LoadProxyList.Failed) Handled(#Handled)
#Handled := #uSystem.uFrameworkManager.avHandleServerError( #Com_Self )
Endroutine


Endroutine

* --------------------------------------------------------------------------
Evtroutine Handling(#NotesList.ItemClick #NotesList.ItemDoubleClick)

If ((#UserInterfaceLocked.Not) AndIf (#NotesList.FocusItem *IsNot *null))

Get_Entry Number(#NotesList.FocusItem.Entry) From_List(#NotesList)

#CurrentNoteGUID := #DF_NOTE_GUID
Set Com(#AVLOCALTIMER) Componenttag(Show) Interval(2)
#COM_OWNER.avGotoBusyState Showbusytext("Loading") Animated(False)

Endif

Endroutine

* --------------------------------------------------------------------------
Evtroutine Handling(#ButtonPanel.ButtonClicked) Withid(#ButtonId)

Case (#ButtonId)

When (= New)
Set Com(#AVLOCALTIMER) Componenttag(New) Interval(2)
#COM_OWNER.avGotoBusyState Showbusytext("Creating") Animated(False)

When (= Refresh)
Set Com(#AVLOCALTIMER) Componenttag(Refresh) Interval(2)
#COM_OWNER.avGotoBusyState Showbusytext("Refreshing") Animated(False)

Endcase

Endroutine

* --------------------------------------------------------------------------
Evtroutine Handling(#DF_Note_NoteDetailPanel.DeletedNoteDetails) Guid(#GUID)

Define_Com Class(#Std_Int) Name(#PreviousEntryNumber)

* Lock the interface
#UserInterfaceLocked := True

* Update an existing ite,
Selectlist Named(#NotesList) Where(#DF_NOTE_GUID = #GUID)
#PreviousEntryNumber := #NotesList.CurrentItem.Entry - 1
Dlt_Entry From_List(#NotesList)
Endselect

* Try to select the previous list entry
If (#PreviousEntryNumber < 1)
#PreviousEntryNumber := 1
Endif

Get_Entry Number(#PreviousEntryNumber) From_List(#NotesList)
If_Status Is(*OKAY)
Set Com(#NotesList.CurrentItem) Selected(True) Focus(True)
#CurrentNoteGUID := #DF_NOTE_GUID
Set Com(#AVLOCALTIMER) Componenttag(Show) Interval(2)
#COM_OWNER.avGotoBusyState Showbusytext("Loading") Animated(False)
Endif

* Unlocked
#UserInterfaceLocked := False

Endroutine

* --------------------------------------------------------------------------
Evtroutine Handling(#DF_Note_NoteDetailPanel.CloseNoteDetails)

* Switch back to the left pane in small screen mode
#COM_OWNER.ShowLeftPanelonSmallDevice

* Show nothing
#DF_Note_NoteDetailPanel.ShowNothing

Endroutine

* --------------------------------------------------------------------------
Evtroutine Handling(#DF_Note_NoteDetailPanel.UpdatedNoteDetails) Guid(#GUID) Updated(#Updated) Subject(#Subject)

* Switch back to the left pane in small screen mode
#COM_OWNER.ShowLeftPanelonSmallDevice

* Locked
#UserInterfaceLocked := True

* Update an existing ite,
Selectlist Named(#NotesList) Where(#DF_NOTE_GUID = #GUID)
#DF_NOTE_Updated := #Updated
#DF_NOTE_Subject := #Subject
Upd_Entry In_List(#NotesList)
#UserInterfaceLocked := False
Return
Endselect

* If we reach here, create a new item
#DF_NOTE_GUID := #GUID
#DF_NOTE_Updated := #Updated
#DF_NOTE_Subject := #Subject
Add_Entry To_List(#NotesList)
Set Com(#NotesList.CurrentItem) Selected(True) Focus(True)
#NotesList.VerticalScrollTo Item(#NotesList.CurrentItem) Scrollposition(Visible)

#UserInterfaceLocked := False

Endroutine

* --------------------------------------------------------------------------
Mthroutine Name(ShowRightPanelonSmallDevice) Access(*PRIVATE)

If (#OnSmallScreenDevice)

#Column12Divider.Width := 0

#Column1.Width := 0

#Column2.Width := 1.0

Endif

Endroutine

* --------------------------------------------------------------------------
Mthroutine Name(ShowLeftPanelonSmallDevice) Access(*PRIVATE)

If (#OnSmallScreenDevice)

#Column12Divider.Width := 0

#Column2.Width := 0

#Column1.Width := 1.0


Endif

Endroutine


* --------------------------------------------------------------------------
Evtroutine Handling(#AVLOCALTIMER.Tick)

#AVLOCALTIMER.Interval := 0

Case (#avLocalTimer.ComponentTag.UpperCase)

When (= Show)
#DF_Note_NoteDetailPanel.ShowExistingNote Forguid(#CurrentNoteGUID) Forboitem(#com_owner.avAssociatedInstance)
#COM_OWNER.ShowRightPanelonSmallDevice

When (= New)
#DF_Note_NoteDetailPanel.MakeNewNote Forboitem(#com_owner.avAssociatedInstance)
#COM_OWNER.ShowRightPanelonSmallDevice

When (= Refresh)
#Com_Owner.LoadNoteList

Endcase

#COM_OWNER.avGotoFreeState

Endroutine

End_Com
